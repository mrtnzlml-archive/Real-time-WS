#!/usr/bin/env node

var PORT = 50000;

//var cluster = require('cluster');
//var numCPUs = require('os').cpus().length;
var debug = require('debug')('app');
var app = require('../app');
var dgram = require("dgram");
var udpSocket = dgram.createSocket("udp4");
var redis = require("redis");
var redisClient = redis.createClient();
var net = require('net');
var resp = require('node-resp');

//app.set('port', process.env.PORT || PORT);
app.set('port', 88);

var webServer = app.listen(app.get('port'), function () {
	debug('Express server listening on port ' + webServer.address().port);
});

///// SOCKET /////

var io = require('socket.io')(webServer);
io.on('connection', function (socket) {
	redisClient.smembers('devices', function (err, result) {
		socket.emit('devices', result);
		result.forEach(function (device) {
			setInterval(function () {
				redisClient.lindex(device + ':data', 0, function (err, reply) {
					socket.emit('data', device + ':' + reply);
				});
				redisClient.hmget(device, 'ip', 'port', 'active', function (err, reply) {
					socket.emit('status', device + ':' + reply);
				});
			}, 100);
		});
	});
});

///// UDP /////

udpSocket.on("message", function (msg, rinfo) {
	//FIXME: not good!
	if (result = msg.toString().match(/\*[0-9]+([\r][\n])(\$[0-9]+\1([0-9a-z]+)\1)+/i)) { //RESP
		//redisClient.lpush('TEMP_000001:data', result[3]);
		//redisClient.ltrim('TEMP_000001:data', 0, 999);

		redisClient.lpush('TEMP_000002:data', result[3]);
		redisClient.ltrim('TEMP_000002:data', 0, 999);
	}
	var message = new Buffer("test");
	udpSocket.send(message, 0, message.length, rinfo.port, rinfo.address);
});
udpSocket.bind(PORT);

///// TCP /////

var server = net.createServer(function (socket) { //'connection' listener
	var responseParser = new resp.ResponseParser();
	responseParser.on('response', function (response) {
		if (response[0].toLowerCase() == 'ping') {
			var device = response[1];
			var epoch = new Date().getTime();
			debug('PING from ' + device);
			redisClient.sismember('devices', device, function (err, result) {
				if (result) {
					redisClient.hmset(device, 'last_ping', epoch);
				} else {
					redisClient.sadd('devices', device);
					redisClient.hmset(device,
						'ip', socket.remoteAddress,
						'port', socket.remotePort,
						'active', true,
						'last_ping', epoch
					);
					debug('Added device ' + device);
				}
			});
		}
	});
	//TODO: prozkoumat socket a data (hledá se něco jako iRTT)
	socket.on('data', function (data) {
		if (data.toString().match(/\*[0-9]+([\r][\n])(\$[0-9]+\1[0-9a-z]+\1)+/i)) { //RESP
			responseParser.parse(data);
		}
		socket.end(); //IMPORTANT!
	});
	socket.on('error', function (err) {
		console.error(err);
	});
}).listen(PORT, function () { //'listening' listener
	debug('TCP server bound');
});

///// SERVER ROUTINE /////

setInterval(function () {
	redisClient.smembers('devices', function (err, result) {
		result.forEach(function (device) {
			redisClient.hmget(device, 'last_ping', function (err, reply) {
				var last_ping = reply[0];
				var epoch = new Date().getTime();
				if (epoch - last_ping < 2000) {
					redisClient.hmset(device, 'active', true);
				} else {
					redisClient.hmset(device, 'active', false);
				}
			});
		});
	});
}, 1000);