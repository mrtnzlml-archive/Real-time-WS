#!/usr/bin/env node

var PORT = 50000;

//var cluster = require('cluster');
//var numCPUs = require('os').cpus().length;
var debug = require('debug')('app');
var app = require('../app');
var dgram = require("dgram");
var net = require('net');
var udpSocket = dgram.createSocket("udp4");
var redis = require("redis");
var redisClient = redis.createClient();

//app.set('port', process.env.PORT || PORT);
app.set('port', 80);

var webServer = app.listen(app.get('port'), function () {
	debug('Express server listening on port ' + webServer.address().port);
});

var io = require('socket.io')(webServer);
io.on('connection', function (socket) {
	socket.emit('news', {hello: 'world'});
	socket.on('my other event', function (data) {
		console.log(data);
	});
	redisClient.smembers('devices', function (err, result) {
		socket.emit('devices', result);
	});
	setInterval(function () {
		redisClient.lindex('concentrator-list', 0, function (err, reply) {
			io.sockets.emit('data', reply);
		});
	}, 100);
});

udpSocket.on('listening', function () {
	debug('UDP listening');
});
udpSocket.on("message", function (msg, rinfo) {
	if (result = String(msg).match(/\+PING:([a-z]{4}_[0-9]{6})/i)) {
		console.log("Device " + result[1] + " connected");
		redisClient.sadd('devices', result[1]);
		redisClient.hmset(result[1], 'ip', rinfo.address, 'port', rinfo.port);
	}
	debug("udpSocket got: " + escape(msg) + " from " + rinfo.address + ":" + rinfo.port);
	redisClient.lpush('concentrator-list', msg);
	redisClient.ltrim('concentrator-list', 0, 999);
	var random = Math.random();
	var message = new Buffer(random);
	udpSocket.send(message, 0, message.length, rinfo.port, rinfo.address, function () {
		//console.log("Response: " + random);
	});
});
setInterval(function () { //nesmí být v on:message, jinak dojde k zahlcení
	var epoch = new Date().getTime();
	var message = new Buffer('+PING:' + epoch + '\r\n'); //TODO číslo požadavku
	udpSocket.send(message, 0, message.length, 49153, '192.168.0.10'); //TODO:IP
}, 1000);
udpSocket.bind(PORT);

escape = function (str) {
	return String(str)
		.replace(/[\\]/g, '\\\\')
		.replace(/[\"]/g, '\\\"')
		.replace(/[\/]/g, '\\/')
		.replace(/[\b]/g, '\\b')
		.replace(/[\f]/g, '\\f')
		.replace(/[\n]/g, '\\n')
		.replace(/[\r]/g, '\\r')
		.replace(/[\t]/g, '\\t');
};

/*

 {
 "r": true,				required
 "t": "time",			time
 "d": []					data
 }

 */