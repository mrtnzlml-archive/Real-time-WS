
Discarded input sections

 .text          0x00000000        0x0 ..\obj\main.o
 .data          0x00000000        0x0 ..\obj\main.o
 .bss           0x00000000        0x0 ..\obj\main.o
 .text.main     0x00000000        0xc ..\obj\main.o
 .debug_info    0x00000000       0x3e ..\obj\main.o
 .debug_abbrev  0x00000000       0x37 ..\obj\main.o
 .debug_aranges
                0x00000000       0x20 ..\obj\main.o
 .debug_ranges  0x00000000       0x10 ..\obj\main.o
 .debug_line    0x00000000       0x67 ..\obj\main.o
 .debug_str     0x00000000       0xb5 ..\obj\main.o
 .comment       0x00000000       0x71 ..\obj\main.o
 .ARM.attributes
                0x00000000       0x33 ..\obj\main.o
 .debug_frame   0x00000000       0x2c ..\obj\main.o

Memory Configuration

Name             Origin             Length             Attributes
rom              0x08000000         0x00040000         xr
ram              0x20000000         0x00010000         xrw
*default*        0x00000000         0xffffffff

Linker script and memory map

                0x20010000                _eram = 0x20010000

.text
 *(.isr_vector)
 *(.text*)
 *(.init)
 *(.fini)
 *crtbegin.o(.ctors)
 *crtbegin?.o(.ctors)
 *(EXCLUDE_FILE(*crtend.o *crtend?.o) .ctors)
 *(SORT(.ctors.*))
 *(.ctors)
 *crtbegin.o(.dtors)
 *crtbegin?.o(.dtors)
 *(EXCLUDE_FILE(*crtend.o *crtend?.o) .dtors)
 *(SORT(.dtors.*))
 *(.dtors)
 *(.rodata*)
 *(.eh_fram e*)

.glue_7         0x08000000        0x0
 .glue_7        0x00000000        0x0 linker stubs

.glue_7t        0x08000000        0x0
 .glue_7t       0x00000000        0x0 linker stubs

.vfp11_veneer   0x08000000        0x0
 .vfp11_veneer  0x00000000        0x0 linker stubs

.v4_bx          0x08000000        0x0
 .v4_bx         0x00000000        0x0 linker stubs

.iplt           0x08000000        0x0
 .iplt          0x00000000        0x0 ..\obj\main.o

.rel.dyn        0x08000000        0x0
 .rel.iplt      0x00000000        0x0 ..\obj\main.o

.ARM.extab
 *(.ARM.extab* .gnu.linkonce.armextab.*)
                0x08000000                __exidx_start = .

.ARM.exidx
 *(.ARM.exidx* .gnu.linkonce.armexidx.*)
                0x08000000                __exidx_end = .
                0x08000000                __etext = .
                0x00000000                _sidata = __etext

.data           0x20000000        0x0 load address 0x00000000
                0x20000000                __data_start__ = .
                0x20000000                _sdata = __data_start__
 *(vtable)
 *(.data*)
                0x20000000                . = ALIGN (0x4)
                0x20000000                PROVIDE (__preinit_array_start, .)
 *(.preinit_array)
                0x20000000                PROVIDE (__preinit_array_end, .)
                0x20000000                . = ALIGN (0x4)
                0x20000000                PROVIDE (__init_array_start, .)
 *(SORT(.init_array.*))
 *(.init_array)
                0x20000000                PROVIDE (__init_array_end, .)
                0x20000000                . = ALIGN (0x4)
                0x20000000                PROVIDE (__fini_array_start, .)
 *(SORT(.fini_array.*))
 *(.fini_array)
                0x20000000                PROVIDE (__fini_array_end, .)
 *(.jcr*)
                0x20000000                . = ALIGN (0x4)
                0x20000000                __data_end__ = .
                0x20000000                _edata = __data_end__

.igot.plt       0x20000000        0x0
 .igot.plt      0x00000000        0x0 ..\obj\main.o

.bss            0x20000000        0x0
                0x20000000                . = ALIGN (0x4)
                0x20000000                __bss_start__ = .
                0x20000000                _sbss = __bss_start__
 *(.bss*)
 *(COMMON)
                0x20000000                . = ALIGN (0x4)
                0x20000000                __bss_end__ = .
                0x20000000                _ebss = __bss_end__

.heap           0x20000000        0x0
                0x20000000                __end__ = .
                0x20000000                _end = __end__
                0x20000000                end = __end__
 *(.heap*)
                0x20000000                __HeapLimit = .

.co_stack       0x20000000        0x0
                0x20000000                . = ALIGN (0x8)
 *(.co_stack .co_stack.*)
                0x20010000                __StackTop = (ORIGIN (ram) + 0x10000)
                0x20010000                __StackLimit = (__StackTop - SIZEOF (.co_stack))
                0x20010000                PROVIDE (__stack, __StackTop)
                0x00000001                ASSERT ((__StackLimit >= __HeapLimit), region ram  overflowed with stack)
LOAD ..\obj\main.o
START GROUP
LOAD c:/program files (x86)/gnu tools arm embedded/4.8 2014q3/bin/../lib/gcc/arm-none-eabi/4.8.4/armv7e-m\libgcc.a
LOAD c:/program files (x86)/gnu tools arm embedded/4.8 2014q3/bin/../lib/gcc/arm-none-eabi/4.8.4/../../../../arm-none-eabi/lib/armv7e-m\libg.a
LOAD c:/program files (x86)/gnu tools arm embedded/4.8 2014q3/bin/../lib/gcc/arm-none-eabi/4.8.4/../../../../arm-none-eabi/lib/armv7e-m\libc.a
END GROUP
OUTPUT(test.elf elf32-littlearm)
